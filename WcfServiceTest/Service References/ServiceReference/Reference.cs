//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceTest.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="buildingEntity", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTest")]
    [System.SerializableAttribute()]
    public partial class buildingEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int buildingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string buildingNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string buildingNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> createdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string facultyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> updatedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string active {
            get {
                return this.activeField;
            }
            set {
                if ((object.ReferenceEquals(this.activeField, value) != true)) {
                    this.activeField = value;
                    this.RaisePropertyChanged("active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int buildingID {
            get {
                return this.buildingIDField;
            }
            set {
                if ((this.buildingIDField.Equals(value) != true)) {
                    this.buildingIDField = value;
                    this.RaisePropertyChanged("buildingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string buildingName {
            get {
                return this.buildingNameField;
            }
            set {
                if ((object.ReferenceEquals(this.buildingNameField, value) != true)) {
                    this.buildingNameField = value;
                    this.RaisePropertyChanged("buildingName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string buildingNo {
            get {
                return this.buildingNoField;
            }
            set {
                if ((object.ReferenceEquals(this.buildingNoField, value) != true)) {
                    this.buildingNoField = value;
                    this.RaisePropertyChanged("buildingNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> created {
            get {
                return this.createdField;
            }
            set {
                if ((this.createdField.Equals(value) != true)) {
                    this.createdField = value;
                    this.RaisePropertyChanged("created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string facultyCode {
            get {
                return this.facultyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.facultyCodeField, value) != true)) {
                    this.facultyCodeField = value;
                    this.RaisePropertyChanged("facultyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> updated {
            get {
                return this.updatedField;
            }
            set {
                if ((this.updatedField.Equals(value) != true)) {
                    this.updatedField = value;
                    this.RaisePropertyChanged("updated");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTest")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        WcfServiceTest.ServiceReference.buildingEntity[] GetData(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<WcfServiceTest.ServiceReference.buildingEntity[]> GetDataAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WcfServiceTest.ServiceReference.CompositeType GetDataUsingDataContract(WcfServiceTest.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WcfServiceTest.ServiceReference.CompositeType> GetDataUsingDataContractAsync(WcfServiceTest.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateBuilding", ReplyAction="http://tempuri.org/IService1/updateBuildingResponse")]
        string updateBuilding(string id, string field, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateBuilding", ReplyAction="http://tempuri.org/IService1/updateBuildingResponse")]
        System.Threading.Tasks.Task<string> updateBuildingAsync(string id, string field, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertBuilding", ReplyAction="http://tempuri.org/IService1/insertBuildingResponse")]
        string insertBuilding(string buildingNo, string buildingName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertBuilding", ReplyAction="http://tempuri.org/IService1/insertBuildingResponse")]
        System.Threading.Tasks.Task<string> insertBuildingAsync(string buildingNo, string buildingName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteBuilding", ReplyAction="http://tempuri.org/IService1/deleteBuildingResponse")]
        string deleteBuilding(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteBuilding", ReplyAction="http://tempuri.org/IService1/deleteBuildingResponse")]
        System.Threading.Tasks.Task<string> deleteBuildingAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WcfServiceTest.ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WcfServiceTest.ServiceReference.IService1>, WcfServiceTest.ServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceTest.ServiceReference.buildingEntity[] GetData(string id) {
            return base.Channel.GetData(id);
        }
        
        public System.Threading.Tasks.Task<WcfServiceTest.ServiceReference.buildingEntity[]> GetDataAsync(string id) {
            return base.Channel.GetDataAsync(id);
        }
        
        public WcfServiceTest.ServiceReference.CompositeType GetDataUsingDataContract(WcfServiceTest.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WcfServiceTest.ServiceReference.CompositeType> GetDataUsingDataContractAsync(WcfServiceTest.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string updateBuilding(string id, string field, string value) {
            return base.Channel.updateBuilding(id, field, value);
        }
        
        public System.Threading.Tasks.Task<string> updateBuildingAsync(string id, string field, string value) {
            return base.Channel.updateBuildingAsync(id, field, value);
        }
        
        public string insertBuilding(string buildingNo, string buildingName) {
            return base.Channel.insertBuilding(buildingNo, buildingName);
        }
        
        public System.Threading.Tasks.Task<string> insertBuildingAsync(string buildingNo, string buildingName) {
            return base.Channel.insertBuildingAsync(buildingNo, buildingName);
        }
        
        public string deleteBuilding(string id) {
            return base.Channel.deleteBuilding(id);
        }
        
        public System.Threading.Tasks.Task<string> deleteBuildingAsync(string id) {
            return base.Channel.deleteBuildingAsync(id);
        }
    }
}
